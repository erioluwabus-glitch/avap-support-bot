[1mdiff --git a/avap_bot/bot.py b/avap_bot/bot.py[m
[1mindex 9e5d84b..e613d8a 100644[m
[1m--- a/avap_bot/bot.py[m
[1m+++ b/avap_bot/bot.py[m
[36m@@ -54,7 +54,8 @@[m [masync def telegram_webhook(request: Request):[m
         logger.error(f"Error in webhook: {e}", exc_info=True)[m
         return Response(status_code=500)[m
 [m
[31m-app.post("/webhook")(telegram_webhook)[m
[32m+[m[32m# Handle webhook with bot token in path (Telegram standard format)[m
[32m+[m[32mapp.post("/webhook/{bot_token}")(telegram_webhook)[m
 app.get("/health")(health_check)[m
 [m
 [m
[36m@@ -85,10 +86,18 @@[m [masync def main_polling():[m
 async def on_startup():[m
     """Actions to perform on application startup."""[m
     await initialize_services()[m
[31m-    webhook_url = os.getenv("WEBHOOK_URL")[m
[31m-    if webhook_url:[m
[32m+[m
[32m+[m[32m    # Set webhook URL - construct proper Telegram webhook URL[m
[32m+[m[32m    webhook_base = os.getenv("WEBHOOK_URL")[m
[32m+[m[32m    bot_token = os.getenv("BOT_TOKEN")[m
[32m+[m
[32m+[m[32m    if webhook_base and bot_token:[m
[32m+[m[32m        # Construct proper webhook URL: https://your-app.com/webhook/BOT_TOKEN[m
[32m+[m[32m        webhook_url = f"{webhook_base.rstrip('/')}/webhook/{bot_token}"[m
         logger.info(f"Setting webhook to {webhook_url}")[m
         await bot_app.bot.set_webhook(url=webhook_url, allowed_updates=["message", "callback_query"])[m
[32m+[m[32m    elif webhook_base:[m
[32m+[m[32m        logger.warning("WEBHOOK_URL set but BOT_TOKEN missing. Webhook not configured.")[m
     else:[m
         logger.warning("WEBHOOK_URL not set. Bot will not receive updates unless webhook is set manually.")[m
 [m
warning: in the working copy of 'avap_bot/bot.py', LF will be replaced by CRLF the next time Git touches it
[1mdiff --git a/avap_bot/bot.py b/avap_bot/bot.py[m
[1mindex 73e8686..adc52a7 100644[m
[1m--- a/avap_bot/bot.py[m
[1m+++ b/avap_bot/bot.py[m
[36m@@ -4,6 +4,7 @@[m [mMain entry point for the AVAP Support Bot.[m
 import os[m
 import logging[m
 import asyncio[m
[32m+[m[32mimport time[m
 from telegram import Update[m
 from telegram.ext import Application[m
 from fastapi import FastAPI, Request, Response[m
[36m@@ -39,9 +40,66 @@[m [mscheduler.start()[m
 logger.info("Scheduler started for daily tips")[m
 [m
 # --- Webhook and Health Check ---[m
[32m+[m[32masync def keep_alive_check(bot):[m
[32m+[m[32m    """Background keep-alive check to prevent Render timeouts."""[m
[32m+[m[32m    try:[m
[32m+[m[32m        # Perform a simple database check to keep connection alive[m
[32m+[m[32m        from avap_bot.services.supabase_service import get_supabase[m
[32m+[m[32m        client = get_supabase()[m
[32m+[m[32m        await client.table("verified_users").select("id").limit(1).execute()[m
[32m+[m
[32m+[m[32m        # Log activity to show the bot is active[m
[32m+[m[32m        logger.info("Keep-alive check completed - Bot is active and responsive")[m
[32m+[m
[32m+[m[32m    except Exception as e:[m
[32m+[m[32m        logger.error(f"Keep-alive check failed: {e}")[m
[32m+[m[32m        # Try to reinitialize if there are issues[m
[32m+[m[32m        try:[m
[32m+[m[32m            from avap_bot.services.supabase_service import init_supabase[m
[32m+[m[32m            await init_supabase()[m
[32m+[m[32m            logger.info("Reinitialized Supabase connection")[m
[32m+[m[32m        except Exception as reinit_error:[m
[32m+[m[32m            logger.error(f"Failed to reinitialize Supabase: {reinit_error}")[m
[32m+[m
[32m+[m
 async def health_check():[m
[31m-    """Simple health check endpoint."""[m
[31m-    return {"status": "ok"}[m
[32m+[m[32m    """Comprehensive health check endpoint with keep-alive functionality."""[m
[32m+[m[32m    try:[m
[32m+[m[32m        # Check if Supabase is still connected[m
[32m+[m[32m        from avap_bot.services.supabase_service import get_supabase[m
[32m+[m[32m        client = get_supabase()[m
[32m+[m[32m        await client.table("verified_users").select("id").limit(1).execute()[m
[32m+[m
[32m+[m[32m        # Check if bot application is initialized[m
[32m+[m[32m        if not bot_app or not hasattr(bot_app, 'bot'):[m
[32m+[m[32m            raise RuntimeError("Bot application not initialized")[m
[32m+[m
[32m+[m[32m        # Check if scheduler is running[m
[32m+[m[32m        if not scheduler or scheduler.state == 0:[m
[32m+[m[32m            logger.warning("Scheduler may not be running properly")[m
[32m+[m
[32m+[m[32m        # Log health check activity to prevent timeouts[m
[32m+[m[32m        logger.info("Health check passed - Bot is alive and responsive")[m
[32m+[m
[32m+[m[32m        return {[m
[32m+[m[32m            "status": "healthy",[m
[32m+[m[32m            "service": "avap-support-bot",[m
[32m+[m[32m            "version": "2.0.0",[m
[32m+[m[32m            "timestamp": time.time(),[m
[32m+[m[32m            "uptime": "active",[m
[32m+[m[32m            "supabase_connected": True,[m
[32m+[m[32m            "bot_initialized": True,[m
[32m+[m[32m            "scheduler_running": scheduler.running if scheduler else False,[m
[32m+[m[32m            "keep_alive": "active"[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m    except Exception as e:[m
[32m+[m[32m        logger.error(f"Health check failed: {e}")[m
[32m+[m[32m        return {[m
[32m+[m[32m            "status": "unhealthy",[m
[32m+[m[32m            "error": str(e),[m
[32m+[m[32m            "timestamp": time.time()[m
[32m+[m[32m        }[m
 [m
 async def telegram_webhook(request: Request):[m
     """Handle incoming Telegram updates."""[m
[36m@@ -66,7 +124,7 @@[m [masync def initialize_services():[m
     logger.info("Initializing services...")[m
     try:[m
         # Initialize Supabase[m
[31m-        init_supabase()[m
[32m+[m[32m        await init_supabase()[m
 [m
         # Initialize the Telegram Application[m
         logger.info("Initializing Telegram Application...")[m
[36m@@ -76,6 +134,17 @@[m [masync def initialize_services():[m
         # Schedule daily tips[m
         await schedule_daily_tips(bot_app.bot, scheduler)[m
 [m
[32m+[m[32m        # Schedule keep-alive health checks every 5 minutes[m
[32m+[m[32m        scheduler.add_job([m
[32m+[m[32m            keep_alive_check,[m
[32m+[m[32m            'interval',[m
[32m+[m[32m            minutes=5,[m
[32m+[m[32m            args=[bot_app.bot],[m
[32m+[m[32m            id='keep_alive',[m
[32m+[m[32m            replace_existing=True[m
[32m+[m[32m        )[m
[32m+[m[32m        logger.info("Keep-alive health checks scheduled every 5 minutes")[m
[32m+[m
         logger.info("Services initialized successfully.")[m
     except Exception as e:[m
         logger.critical(f"Failed to initialize services: {e}", exc_info=True)[m
