[1mdiff --git a/avap_bot/services/supabase_service.py b/avap_bot/services/supabase_service.py[m
[1mindex eeaadd9..1a28991 100644[m
[1m--- a/avap_bot/services/supabase_service.py[m
[1m+++ b/avap_bot/services/supabase_service.py[m
[36m@@ -48,38 +48,41 @@[m [mdef validate_supabase_credentials():[m
         raise ValueError("Supabase key appears to be too short")[m
 [m
 [m
[31m-def check_tables_exist():[m
[32m+[m[32masync def check_tables_exist():[m
     """Check if all required tables exist"""[m
     required_tables = ['verified_users', 'pending_verifications', 'match_requests'][m
[31m-    [m
[32m+[m
     for table in required_tables:[m
         try:[m
             client = get_supabase()[m
[31m-            client.table(table).select('*').limit(1).execute()[m
[32m+[m[32m            await client.table(table).select('*').limit(1).execute()[m
         except Exception as e:[m
             logger.warning(f"Table {table} may not exist: {e}")[m
 [m
 [m
[31m-def init_supabase() -> Client:[m
[32m+[m[32masync def init_supabase() -> Client:[m
     """Initialize Supabase client with optimized startup"""[m
     global supabase_client[m
[31m-    [m
[32m+[m
     if supabase_client:[m
         return supabase_client[m
[31m-        [m
[32m+[m
     try:[m
         validate_supabase_credentials()[m
[31m-        [m
[32m+[m
         logger.info("🚀 Initializing Supabase connection...")[m
         test_client = create_client(SUPABASE_URL, SUPABASE_KEY)[m
[31m-        [m
[32m+[m
         # Quick connection test[m
[31m-        test_client.table('verified_users').select('count', count='exact').limit(1).execute()[m
[31m-        [m
[32m+[m[32m        await test_client.table('verified_users').select('count', count='exact').limit(1).execute()[m
[32m+[m
[32m+[m[32m        # Check if required tables exist[m
[32m+[m[32m        await check_tables_exist()[m
[32m+[m
         supabase_client = test_client[m
         logger.info("✅ Supabase connected successfully")[m
         return supabase_client[m
[31m-            [m
[32m+[m
     except Exception as e:[m
         logger.error(f"❌ Supabase connection failed: {str(e)}")[m
         raise[m
[36m@@ -547,4 +550,1047 @@[m [mdef get_assignment_by_id(assignment_id: int) -> Optional[Dict[str, Any]]:[m
         return res.data[0] if res.data else None[m
     except Exception as e:[m
         logger.exception("Supabase get_assignment_by_id error: %s", e)[m
[31m-        return None[m
\ No newline at end of file[m
[32m+[m[32m        return None[m
[32m+[m[32m        if res.data and len(res.data) > 0:[m
[32m+[m
[32m+[m[32m            return res.data[0][m
[32m+[m
[32m+[m[32m        return None[m
[32m+[m
[32m+[m[32m    except Exception as e:[m
[32m+[m
[32m+[m[32m        logger.exception("Supabase check_verified_user error: %s", e)[m
[32m+[m
[32m+[m[32m        return None[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32mdef add_assignment_submission(telegram_id: int, username: str, module: str, file_id: str, file_name: str, submission_type: str) -> Dict[str, Any]:[m
[32m+[m
[32m+[m[32m    """Add a new assignment submission"""[m
[32m+[m
[32m+[m[32m    client = get_supabase()[m
[32m+[m
[32m+[m[32m    try:[m
[32m+[m
[32m+[m[32m        payload = {[m
[32m+[m
[32m+[m[32m            "telegram_id": telegram_id,[m
[32m+[m
[32m+[m[32m            "username": username,[m
[32m+[m
[32m+[m[32m            "module": module,[m
[32m+[m
[32m+[m[32m            "file_id": file_id,[m
[32m+[m
[32m+[m[32m            "file_name": file_name,[m
[32m+[m
[32m+[m[32m            "submission_type": submission_type,[m
[32m+[m
[32m+[m[32m            "status": "submitted",[m
[32m+[m
[32m+[m[32m            "submitted_at": datetime.now(timezone.utc).isoformat()[m
[32m+[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        res = client.table("assignments").insert(payload).execute()[m
[32m+[m
[32m+[m[32m        return res.data[0][m
[32m+[m
[32m+[m[32m    except Exception as e:[m
[32m+[m
[32m+[m[32m        logger.exception("Supabase add_assignment_submission error: %s", e)[m
[32m+[m
[32m+[m[32m        raise[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32mdef get_student_assignments(telegram_id: int) -> List[Dict[str, Any]]:[m
[32m+[m
[32m+[m[32m    """Get all assignments for a student"""[m
[32m+[m
[32m+[m[32m    client = get_supabase()[m
[32m+[m
[32m+[m[32m    try:[m
[32m+[m
[32m+[m[32m        res = client.table("assignments").select("*").eq("telegram_id", telegram_id).execute()[m
[32m+[m
[32m+[m[32m        return res.data or [][m
[32m+[m
[32m+[m[32m    except Exception as e:[m
[32m+[m
[32m+[m[32m        logger.exception("Supabase get_student_assignments error: %s", e)[m
[32m+[m
[32m+[m[32m        return [][m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32mdef update_assignment_grade(submission_id: int, grade: int, comment: Optional[str] = None) -> bool:[m
[32m+[m
[32m+[m[32m    """Update assignment with grade and comments"""[m
[32m+[m
[32m+[m[32m    client = get_supabase()[m
[32m+[m
[32m+[m[32m    try:[m
[32m+[m
[32m+[m[32m        update_data = {[m
[32m+[m
[32m+[m[32m            "grade": grade,[m
[32m+[m
[32m+[m[32m            "status": "graded",[m
[32m+[m
[32m+[m[32m            "graded_at": datetime.now(timezone.utc).isoformat()[m
[32m+[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        if comment:[m
[32m+[m
[32m+[m[32m            update_data["comment"] = comment[m
[32m+[m
[32m+[m[41m        [m
[32m+[m
[32m+[m[32m        res = client.table("assignments").update(update_data).eq("id", submission_id).execute()[m
[32m+[m
[32m+[m[32m        return bool(res.data)[m
[32m+[m
[32m+[m[32m    except Exception as e:[m
[32m+[m
[32m+[m[32m        logger.exception("Supabase update_assignment_grade error: %s", e)[m
[32m+[m
[32m+[m[32m        return False[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32mdef add_win(telegram_id: int, username: str, file_id: str, file_name: str, win_type: str) -> Dict[str, Any]:[m
[32m+[m
[32m+[m[32m    """Add a new win"""[m
[32m+[m
[32m+[m[32m    client = get_supabase()[m
[32m+[m
[32m+[m[32m    try:[m
[32m+[m
[32m+[m[32m        payload = {[m
[32m+[m
[32m+[m[32m            "telegram_id": telegram_id,[m
[32m+[m
[32m+[m[32m            "username": username,[m
[32m+[m
[32m+[m[32m            "file_id": file_id,[m
[32m+[m
[32m+[m[32m            "file_name": file_name,[m
[32m+[m
[32m+[m[32m            "win_type": win_type,[m
[32m+[m
[32m+[m[32m            "shared_at": datetime.now(timezone.utc).isoformat()[m
[32m+[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        res = client.table("wins").insert(payload).execute()[m
[32m+[m
[32m+[m[32m        return res.data[0][m
[32m+[m
[32m+[m[32m    except Exception as e:[m
[32m+[m
[32m+[m[32m        logger.exception("Supabase add_win error: %s", e)[m
[32m+[m
[32m+[m[32m        raise[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32mdef get_student_wins(telegram_id: int) -> List[Dict[str, Any]]:[m
[32m+[m
[32m+[m[32m    """Get all wins for a student"""[m
[32m+[m
[32m+[m[32m    client = get_supabase()[m
[32m+[m
[32m+[m[32m    try:[m
[32m+[m
[32m+[m[32m        res = client.table("wins").select("*").eq("telegram_id", telegram_id).execute()[m
[32m+[m
[32m+[m[32m        return res.data or [][m
[32m+[m
[32m+[m[32m    except Exception as e:[m
[32m+[m
[32m+[m[32m        logger.exception("Supabase get_student_wins error: %s", e)[m
[32m+[m
[32m+[m[32m        return [][m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32mdef add_question(telegram_id: int, username: str, question_text: str, file_id: Optional[str] = None, file_name: Optional[str] = None) -> Dict[str, Any]:[m
[32m+[m
[32m+[m[32m    """Add a new question"""[m
[32m+[m
[32m+[m[32m    client = get_supabase()[m
[32m+[m
[32m+[m[32m    try:[m
[32m+[m
[32m+[m[32m        payload = {[m
[32m+[m
[32m+[m[32m            "telegram_id": telegram_id,[m
[32m+[m
[32m+[m[32m            "username": username,[m
[32m+[m
[32m+[m[32m            "question_text": question_text,[m
[32m+[m
[32m+[m[32m            "file_id": file_id,[m
[32m+[m
[32m+[m[32m            "file_name": file_name,[m
[32m+[m
[32m+[m[32m            "status": "pending",[m
[32m+[m
[32m+[m[32m            "asked_at": datetime.now(timezone.utc).isoformat()[m
[32m+[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        res = client.table("questions").insert(payload).execute()[m
[32m+[m
[32m+[m[32m        return res.data[0][m
[32m+[m
[32m+[m[32m    except Exception as e:[m
[32m+[m
[32m+[m[32m        logger.exception("Supabase add_question error: %s", e)[m
[32m+[m
[32m+[m[32m        raise[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32mdef get_student_questions(telegram_id: int) -> List[Dict[str, Any]]:[m
[32m+[m
[32m+[m[32m    """Get all questions for a student"""[m
[32m+[m
[32m+[m[32m    client = get_supabase()[m
[32m+[m
[32m+[m[32m    try:[m
[32m+[m
[32m+[m[32m        res = client.table("questions").select("*").eq("telegram_id", telegram_id).execute()[m
[32m+[m
[32m+[m[32m        return res.data or [][m
[32m+[m
[32m+[m[32m    except Exception as e:[m
[32m+[m
[32m+[m[32m        logger.exception("Supabase get_student_questions error: %s", e)[m
[32m+[m
[32m+[m[32m        return [][m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32mdef update_question_answer(question_id: int, answer: str) -> bool:[m
[32m+[m
[32m+[m[32m    """Update question with answer"""[m
[32m+[m
[32m+[m[32m    client = get_supabase()[m
[32m+[m
[32m+[m[32m    try:[m
[32m+[m
[32m+[m[32m        update_data = {[m
[32m+[m
[32m+[m[32m            "answer": answer,[m
[32m+[m
[32m+[m[32m            "status": "answered",[m
[32m+[m
[32m+[m[32m            "answered_at": datetime.now(timezone.utc).isoformat()[m
[32m+[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        res = client.table("questions").update(update_data).eq("id", question_id).execute()[m
[32m+[m
[32m+[m[32m        return bool(res.data)[m
[32m+[m
[32m+[m[32m    except Exception as e:[m
[32m+[m
[32m+[m[32m        logger.exception("Supabase update_question_answer error: %s", e)[m
[32m+[m
[32m+[m[32m        return False[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32mdef get_faqs() -> List[Dict[str, Any]]:[m
[32m+[m
[32m+[m[32m    """Get all FAQs for AI matching"""[m
[32m+[m
[32m+[m[32m    client = get_supabase()[m
[32m+[m
[32m+[m[32m    try:[m
[32m+[m
[32m+[m[32m        res = client.table("faqs").select("*").execute()[m
[32m+[m
[32m+[m[32m        return res.data or [][m
[32m+[m
[32m+[m[32m    except Exception as e:[m
[32m+[m
[32m+[m[32m        logger.exception("Supabase get_faqs error: %s", e)[m
[32m+[m
[32m+[m[32m        return [][m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32mdef add_faq(question: str, answer: str) -> Dict[str, Any]:[m
[32m+[m
[32m+[m[32m    """Add a new FAQ"""[m
[32m+[m
[32m+[m[32m    client = get_supabase()[m
[32m+[m
[32m+[m[32m    try:[m
[32m+[m
[32m+[m[32m        payload = {[m
[32m+[m
[32m+[m[32m            "question": question,[m
[32m+[m
[32m+[m[32m            "answer": answer,[m
[32m+[m
[32m+[m[32m            "created_at": datetime.now(timezone.utc).isoformat()[m
[32m+[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        res = client.table("faqs").insert(payload).execute()[m
[32m+[m
[32m+[m[32m        return res.data[0][m
[32m+[m
[32m+[m[32m    except Exception as e:[m
[32m+[m
[32m+[m[32m        logger.exception("Supabase add_faq error: %s", e)[m
[32m+[m
[32m+[m[32m        raise[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32mdef get_tip_for_day(day_of_week: int) -> Optional[Dict[str, Any]]:[m
[32m+[m
[32m+[m[32m    """Get tip for specific day of week"""[m
[32m+[m
[32m+[m[32m    client = get_supabase()[m
[32m+[m
[32m+[m[32m    try:[m
[32m+[m
[32m+[m[32m        res = client.table("tips").select("*").eq("day_of_week", day_of_week).limit(1).execute()[m
[32m+[m
[32m+[m[32m        return res.data[0] if res.data else None[m
[32m+[m
[32m+[m[32m    except Exception as e:[m
[32m+[m
[32m+[m[32m        logger.exception("Supabase get_tip_for_day error: %s", e)[m
[32m+[m
[32m+[m[32m        return None[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32mdef add_manual_tip(content: str, day_of_week: int) -> Dict[str, Any]:[m
[32m+[m
[32m+[m[32m    """Add a manual tip for specific day"""[m
[32m+[m
[32m+[m[32m    client = get_supabase()[m
[32m+[m
[32m+[m[32m    try:[m
[32m+[m
[32m+[m[32m        payload = {[m
[32m+[m
[32m+[m[32m            "content": content,[m
[32m+[m
[32m+[m[32m            "day_of_week": day_of_week,[m
[32m+[m
[32m+[m[32m            "tip_type": "manual",[m
[32m+[m
[32m+[m[32m            "created_at": datetime.now(timezone.utc).isoformat()[m
[32m+[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        res = client.table("tips").insert(payload).execute()[m
[32m+[m
[32m+[m[32m        return res.data[0][m
[32m+[m
[32m+[m[32m    except Exception as e:[m
[32m+[m
[32m+[m[32m        logger.exception("Supabase add_manual_tip error: %s", e)[m
[32m+[m
[32m+[m[32m        raise[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32mdef get_top_students() -> List[Dict[str, Any]]:[m
[32m+[m
[32m+[m[32m    """Get students with 3+ assignments and 3+ wins"""[m
[32m+[m
[32m+[m[32m    client = get_supabase()[m
[32m+[m
[32m+[m[41m    [m
[32m+[m
[32m+[m[32m    # Get all verified users[m
[32m+[m
[32m+[m[32m    users_res = client.table("verified_users").select("*").eq("status", "verified").execute()[m
[32m+[m
[32m+[m[32m    try:[m
[32m+[m
[32m+[m[32m        users = users_res.data or [][m
[32m+[m
[32m+[m[32m    except Exception as e:[m
[32m+[m
[32m+[m[32m        logger.exception("Supabase get_top_students error: %s", e)[m
[32m+[m
[32m+[m[32m        return [][m
[32m+[m
[32m+[m[41m    [m
[32m+[m
[32m+[m[32m    top_students = [][m
[32m+[m
[32m+[m[32m    for user in users:[m
[32m+[m
[32m+[m[32m        telegram_id = user.get("telegram_id")[m
[32m+[m
[32m+[m[32m        if not telegram_id:[m
[32m+[m
[32m+[m[32m            continue[m
[32m+[m
[32m+[m[41m        [m
[32m+[m
[32m+[m[32m        # Count assignments[m
[32m+[m
[32m+[m[32m        assignments_res = client.table("assignments").select("id", count="exact").eq("telegram_id", telegram_id).execute()[m
[32m+[m
[32m+[m[32m        assignment_count = assignments_res.count or 0[m
[32m+[m
[32m+[m[41m        [m
[32m+[m
[32m+[m[32m        # Count wins[m
[32m+[m
[32m+[m[32m        wins_res = client.table("wins").select("id", count="exact").eq("telegram_id", telegram_id).execute()[m
[32m+[m
[32m+[m[32m        wins_count = wins_res.count or 0[m
[32m+[m
[32m+[m[41m        [m
[32m+[m
[32m+[m[32m        if assignment_count >= 3 and wins_count >= 3:[m
[32m+[m
[32m+[m[32m            top_students.append({[m
[32m+[m
[32m+[m[32m                "telegram_id": telegram_id,[m
[32m+[m
[32m+[m[32m                "username": user.get("username", "unknown"),[m
[32m+[m
[32m+[m[32m                "name": user.get("name", "Unknown"),[m
[32m+[m
[32m+[m[32m                "assignments": assignment_count,[m
[32m+[m
[32m+[m[32m                "wins": wins_count,[m
[32m+[m
[32m+[m[32m                "joined_at": user.get("verified_at", "Unknown")[m
[32m+[m
[32m+[m[32m            })[m
[32m+[m
[32m+[m[41m    [m
[32m+[m
[32m+[m[32m    return top_students[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32mdef get_all_verified_telegram_ids() -> List[int]:[m
[32m+[m
[32m+[m[32m    """Get all verified user telegram IDs for broadcasting"""[m
[32m+[m
[32m+[m[32m    client = get_supabase()[m
[32m+[m
[32m+[m[32m    try:[m
[32m+[m
[32m+[m[32m        res = client.table("verified_users").select("telegram_id").eq("status", "verified").execute()[m
[32m+[m
[32m+[m[32m        return [user["telegram_id"] for user in (res.data or []) if user.get("telegram_id")][m
[32m+[m
[32m+[m[32m    except Exception as e:[m
[32m+[m
[32m+[m[32m        logger.exception("Supabase get_all_verified_telegram_ids error: %s", e)[m
[32m+[m
[32m+[m[32m        return [][m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32mdef update_user_badge(telegram_id: int, badge: str) -> bool:[m
[32m+[m
[32m+[m[32m    """Update user badge"""[m
[32m+[m
[32m+[m[32m    client = get_supabase()[m
[32m+[m
[32m+[m[32m    try:[m
[32m+[m
[32m+[m[32m        res = client.table("verified_users").update({"badge": badge}).eq("telegram_id", telegram_id).execute()[m
[32m+[m
[32m+[m[32m        return bool(res.data)[m
[32m+[m
[32m+[m[32m    except Exception as e:[m
[32m+[m
[32m+[m[32m        logger.exception("Supabase update_user_badge error: %s", e)[m
[32m+[m
[32m+[m[32m        return False[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32mdef get_assignment_by_id(assignment_id: int) -> Optional[Dict[str, Any]]:[m
[32m+[m
[32m+[m[32m    """Get assignment by ID"""[m
[32m+[m
[32m+[m[32m    client = get_supabase()[m
[32m+[m
[32m+[m[32m    try:[m
[32m+[m
[32m+[m[32m        res = client.table("assignments").select("*").eq("id", assignment_id).execute()[m
[32m+[m
[32m+[m[32m        return res.data[0] if res.data else None[m
[32m+[m
[32m+[m[32m    except Exception as e:[m
[32m+[m
[32m+[m[32m        logger.exception("Supabase get_assignment_by_id error: %s", e)[m
[32m+[m
[32m+[m[32m        return None[m
[32m+[m
[32m+[m[32m        if res.data and len(res.data) > 0:[m
[32m+[m
[32m+[m[32m            return res.data[0][m
[32m+[m
[32m+[m[32m        return None[m
[32m+[m
[32m+[m[32m    except Exception as e:[m
[32m+[m
[32m+[m[32m        logger.exception("Supabase check_verified_user error: %s", e)[m
[32m+[m
[32m+[m[32m        return None[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32mdef add_assignment_submission(telegram_id: int, username: str, module: str, file_id: str, file_name: str, submission_type: str) -> Dict[str, Any]:[m
[32m+[m
[32m+[m[32m    """Add a new assignment submission"""[m
[32m+[m
[32m+[m[32m    client = get_supabase()[m
[32m+[m
[32m+[m[32m    try:[m
[32m+[m
[32m+[m[32m        payload = {[m
[32m+[m
[32m+[m[32m            "telegram_id": telegram_id,[m
[32m+[m
[32m+[m[32m            "username": username,[m
[32m+[m
[32m+[m[32m            "module": module,[m
[32m+[m
[32m+[m[32m            "file_id": file_id,[m
[32m+[m
[32m+[m[32m            "file_name": file_name,[m
[32m+[m
[32m+[m[32m            "submission_type": submission_type,[m
[32m+[m
[32m+[m[32m            "status": "submitted",[m
[32m+[m
[32m+[m[32m            "submitted_at": datetime.now(timezone.utc).isoformat()[m
[32m+[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        res = client.table("assignments").insert(payload).execute()[m
[32m+[m
[32m+[m[32m        return res.data[0][m
[32m+[m
[32m+[m[32m    except Exception as e:[m
[32m+[m
[32m+[m[32m        logger.exception("Supabase add_assignment_submission error: %s", e)[m
[32m+[m
[32m+[m[32m        raise[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32mdef get_student_assignments(telegram_id: int) -> List[Dict[str, Any]]:[m
[32m+[m
[32m+[m[32m    """Get all assignments for a student"""[m
[32m+[m
[32m+[m[32m 